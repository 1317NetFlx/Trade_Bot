import os
import sqlite3
from datetime import datetime, timedelta, time as dtime
from decimal import Decimal

import pandas as pd
import matplotlib.pyplot as plt

from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, ReplyKeyboardRemove

from binance.client import Client
from binance.enums import SIDE_BUY, SIDE_SELL, ORDER_TYPE_MARKET

# =============== CONFIG (–∑–∞–º–µ–Ω–∏/–∏—Å–ø–æ–ª—å–∑—É–π .env) ===============
TG_TOKEN = os.getenv("TG_TOKEN", "YOUR_TG_TOKEN")  # üîë —Ç–æ–∫–µ–Ω Telegram –±–æ—Ç–∞ (BotFather)
REPORT_TZ_NAME = os.getenv("REPORT_TZ", "Europe/Berlin")  # –¥–ª—è –±—É–¥—É—â–∏—Ö –æ—Ç—á—ë—Ç–æ–≤/–≤—Ä–µ–º–µ–Ω–∏
# ===============================================================

bot = Bot(token=TG_TOKEN)
dp = Dispatcher(bot)

# ------------------- SQLite -------------------
conn = sqlite3.connect("trades.db", check_same_thread=False)
cur = conn.cursor()

cur.execute("""
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    mode TEXT DEFAULT 'signal',        -- signal | auto
    binance_api_key TEXT,
    binance_api_secret TEXT,
    use_testnet INTEGER DEFAULT 1,     -- 1=testnet, 0=mainnet
    depo REAL DEFAULT 0,
    risk REAL DEFAULT 1,
    limits_daily REAL DEFAULT 5,
    limits_weekly REAL DEFAULT 15,
    limits_max_trades INTEGER DEFAULT 20
)
""")

cur.execute("""
CREATE TABLE IF NOT EXISTS trades (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    symbol TEXT,
    entry REAL,
    tp REAL,
    sl REAL,
    volume REAL,
    status TEXT DEFAULT 'open',  -- open|win|loss|signal_open
    exit REAL,
    pnl REAL DEFAULT 0,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    closed_at TIMESTAMP
)
""")
conn.commit()

# ------------------- Helpers -------------------
def get_user(user_id: int):
    cur.execute("SELECT user_id, mode, binance_api_key, binance_api_secret, use_testnet, depo, risk, limits_daily, limits_weekly, limits_max_trades FROM users WHERE user_id=?",
                (user_id,))
    row = cur.fetchone()
    if not row:
        cur.execute("INSERT INTO users (user_id) VALUES (?)", (user_id,))
        conn.commit()
        return get_user(user_id)
    keys = ["user_id","mode","api_key","api_secret","use_testnet","depo","risk","limit_daily","limit_weekly","limit_max_trades"]
    return dict(zip(keys, row))

def set_user(user_id: int, **kwargs):
    fields = []
    values = []
    for k,v in kwargs.items():
        fields.append(f"{k}=?")
        values.append(v)
    values.append(user_id)
    cur.execute(f"UPDATE users SET {', '.join(fields)} WHERE user_id=?", values)
    conn.commit()

def _get_symbol_filters(client: Client, symbol: str):
    info = client.get_symbol_info(symbol)
    if not info:
        raise ValueError(f"–°–∏–º–≤–æ–ª {symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ Binance")
    f = {x['filterType']: x for x in info['filters']}
    lot = Decimal(f['LOT_SIZE']['stepSize'])
    tick = Decimal(f['PRICE_FILTER']['tickSize'])
    return lot, tick

def _round_qty(qty: float, step: Decimal) -> Decimal:
    q = Decimal(str(qty))
    return (q // step) * step if step != 0 else q

def _round_price(price: float, tick: Decimal) -> Decimal:
    p = Decimal(str(price))
    return (p // tick) * tick if tick != 0 else p

def get_user_client(u: dict) -> Client:
    """–°–æ–∑–¥–∞—ë—Ç Binance client c –∫–ª—é—á–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –∞–≤—Ç–æ‚Äë—Ç—Ä–µ–π–¥–∞)."""
    if not u["api_key"] or not u["api_secret"]:
        raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω—ã Binance API –∫–ª—é—á–∏.")
    return Client(u["api_key"], u["api_secret"], testnet=bool(u["use_testnet"]))

def user_get_price(client: Client, symbol: str) -> float:
    return float(client.get_symbol_ticker(symbol=symbol)['price'])

def user_get_balance(client: Client, asset: str="USDT") -> float:
    bal = client.get_asset_balance(asset=asset)
    return float(bal['free']) if bal else 0.0

def save_trade(uid, symbol, entry, tp, sl, vol, status="open"):
    cur.execute("""INSERT INTO trades (user_id, symbol, entry, tp, sl, volume, status)
                   VALUES (?, ?, ?, ?, ?, ?, ?)""",
                (uid, symbol, entry, tp, sl, vol, status))
    conn.commit()
    cur.execute("SELECT last_insert_rowid()")
    return cur.fetchone()[0]

def close_trade_db(trade_id: int, exit_price: float, pnl: float, status: str):
    cur.execute("""UPDATE trades
                   SET status=?, exit=?, pnl=?, closed_at=CURRENT_TIMESTAMP
                   WHERE id=?""",
                (status, exit_price, pnl, trade_id))
    conn.commit()

def df_user_trades(uid: int) -> pd.DataFrame:
    q = """SELECT id, symbol, entry, tp, sl, volume, status, exit, pnl, created_at, closed_at
           FROM trades WHERE user_id=?
           ORDER BY COALESCE(closed_at, created_at)"""
    return pd.read_sql_query(q, conn, params=(uid,))

# ---------------- Risk Management ----------------
def today_bounds_utc():
    now = datetime.utcnow()
    start = datetime(now.year, now.month, now.day)
    end = start + timedelta(days=1)
    return start, end

def week_bounds_utc():
    now = datetime.utcnow()
    start = datetime.combine((now - timedelta(days=now.weekday())).date(), dtime.min)
    end = start + timedelta(days=7)
    return start, end

def get_period_pnl(uid, start_dt_utc: datetime, end_dt_utc: datetime) -> float:
    cur.execute("""SELECT COALESCE(SUM(pnl),0) FROM trades
                   WHERE user_id=? AND status IN ('win','loss') AND closed_at BETWEEN ? AND ?""",
                (uid, start_dt_utc.isoformat(" "), end_dt_utc.isoformat(" ")))
    return float(cur.fetchone()[0] or 0.0)

def get_trades_today(uid):
    cur.execute("""SELECT COUNT(*) FROM trades
                   WHERE user_id=? AND DATE(created_at)=DATE('now')""", (uid,))
    return cur.fetchone()[0] or 0

def check_limits(u: dict):
    depo = float(u["depo"] or 0)
    if depo <= 0:
        return True, ""
    start, end = today_bounds_utc()
    pnl_day = get_period_pnl(u["user_id"], start, end)
    day_pct = (pnl_day / depo) * 100.0
    if day_pct <= -abs(u["limit_daily"]):
        return False, "‚õî –î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –ø—Ä–æ—Å–∞–¥–∫–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç."

    wstart, wend = week_bounds_utc()
    pnl_week = get_period_pnl(u["user_id"], wstart, wend)
    week_pct = (pnl_week / depo) * 100.0
    if week_pct <= -abs(u["limit_weekly"]):
        return False, "‚õî –ù–µ–¥–µ–ª—å–Ω—ã–π –ª–∏–º–∏—Ç –ø—Ä–æ—Å–∞–¥–∫–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç."

    if get_trades_today(u["user_id"]) >= int(u["limit_max_trades"]):
        return False, "‚õî –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Å–¥–µ–ª–æ–∫ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è."
    return True, ""

# ================== Start / Mode select ==================
@dp.message_handler(commands=['start'])
async def start_cmd(message: types.Message):
    uid = message.from_user.id
    u = get_user(uid)

    kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.add("üì© –°–∏–≥–Ω–∞–ª—ã", "ü§ñ –ê–≤—Ç–æ-—Ç—Ä–µ–π–¥")
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞:\n"
        "‚Ä¢ üì© –°–∏–≥–Ω–∞–ª—ã ‚Äî —Ç–æ–ª—å–∫–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤\n"
        "‚Ä¢ ü§ñ –ê–≤—Ç–æ‚Äë—Ç—Ä–µ–π–¥ ‚Äî —Ä–µ–∞–ª—å–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞ —á–µ—Ä–µ–∑ Binance (–Ω—É–∂–Ω—ã API –∫–ª—é—á–∏)",
        reply_markup=kb
    )

@dp.message_handler(lambda m: m.text in ["üì© –°–∏–≥–Ω–∞–ª—ã", "ü§ñ –ê–≤—Ç–æ-—Ç—Ä–µ–π–¥"])
async def set_mode(message: types.Message):
    uid = message.from_user.id
    if "–°–∏–≥–Ω–∞–ª—ã" in message.text:
        set_user(uid, mode="signal")
        await message.answer("‚úÖ –†–µ–∂–∏–º ¬´–°–∏–≥–Ω–∞–ª—ã¬ª –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –ë—É–¥—É –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å —Å–¥–µ–ª–∫–∏ –≤ –∂—É—Ä–Ω–∞–ª –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏.",
                             reply_markup=ReplyKeyboardRemove())
    else:
        set_user(uid, mode="auto")
        kb = ReplyKeyboardRemove()
        await message.answer("ü§ñ –†–µ–∂–∏–º ¬´–ê–≤—Ç–æ‚Äë—Ç—Ä–µ–π–¥¬ª. –ü—Ä–∏—à–ª–∏ *Binance API Key* —Å–æ–æ–±—â–µ–Ω–∏–µ–º.",
                             reply_markup=kb, parse_mode="Markdown")

@dp.message_handler(lambda m: True)
async def capture_keys(message: types.Message):
    """–ü—Ä–æ—Å—Ç–∞—è –ø–æ—à–∞–≥–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –≤–≤–æ–¥–∞ –∫–ª—é—á–µ–π –¥–ª—è —Ä–µ–∂–∏–º–∞ auto."""
    uid = message.from_user.id
    u = get_user(uid)

    # –æ–∂–∏–¥–∞–µ–º API –∫–ª—é—á, –µ—Å–ª–∏ auto –∏ –∫–ª—é—á–µ–π –µ—â—ë –Ω–µ—Ç
    if u["mode"] == "auto" and not u["api_key"]:
        if len(message.text.strip()) < 10:
            await message.answer("‚ö†Ô∏è –ü–æ—Ö–æ–∂–µ, —ç—Ç–æ –Ω–µ API Key. –û—Ç–ø—Ä–∞–≤—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Binance API Key.")
            return
        set_user(uid, binance_api_key=message.text.strip())
        await message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å *Binance API Secret* —Å–æ–æ–±—â–µ–Ω–∏–µ–º.",
                             parse_mode="Markdown")
        return

    if u["mode"] == "auto" and u["api_key"] and not u["api_secret"]:
        if len(message.text.strip()) < 10:
            await message.answer("‚ö†Ô∏è –ü–æ—Ö–æ–∂–µ, —ç—Ç–æ –Ω–µ API Secret. –û—Ç–ø—Ä–∞–≤—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Binance API Secret.")
            return
        set_user(uid, binance_api_secret=message.text.strip())
        kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        kb.add("Testnet", "Mainnet")
        await message.answer("–í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º Binance –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏:", reply_markup=kb)
        return

    if u["mode"] == "auto" and u["api_key"] and u["api_secret"] and message.text in ["Testnet", "Mainnet"]:
        use_testnet = 1 if message.text == "Testnet" else 0
        set_user(uid, use_testnet=use_testnet)
        await message.answer("‚úÖ –ö–ª—é—á–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –ú–æ–∂–Ω–æ —Ç–æ—Ä–≥–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥–∞–º–∏.\n"
                             "–ü–æ–¥—Å–∫–∞–∑–∫–∞: /help", reply_markup=ReplyKeyboardRemove())
        return

    # –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –≤–≤–æ–¥ –∫–ª—é—á–µ–π ‚Äî –∫–∏–Ω–µ–º help –ø—Ä–∏ /help
    if message.text == "/help":
        await send_help(message)
        return

# ------------------- Commands core -------------------
@dp.message_handler(commands=['help'])
async def send_help(message: types.Message):
    await message.answer(
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/set_depo 1000 ‚Äî –∑–∞–¥–∞—Ç—å –¥–µ–ø–æ–∑–∏—Ç (–≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π)\n"
        "/set_risk 2 ‚Äî —Ä–∏—Å–∫ –Ω–∞ —Å–¥–µ–ª–∫—É (%)\n"
        "/set_limits daily=5 weekly=15 max_trades=20 ‚Äî –ª–∏–º–∏—Ç—ã —Ä–∏—Å–∫–∞\n"
        "/risk_limits ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –ª–∏–º–∏—Ç—ã\n\n"
        "–¢–æ—Ä–≥–æ–≤–ª—è:\n"
        "/new_trade BTCUSDT 30000 32000 29000 ‚Äî –æ—Ç–∫—Ä—ã—Ç—å (–≤ signal: —Ç–æ–ª—å–∫–æ –∑–∞–ø–∏—Å—å)\n"
        "/close_trade <id> <win|loss> <exit_price> ‚Äî –∑–∞–∫—Ä—ã—Ç—å —Å–¥–µ–ª–∫—É –≤—Ä—É—á–Ω—É—é\n"
        "/balance ‚Äî –±–∞–ª–∞–Ω—Å—ã (—Ç–æ–ª—å–∫–æ auto)\n"
        "/cancel_all BTCUSDT ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å –æ—Ä–¥–µ—Ä–∞ (auto)\n\n"
        "–û—Ç—á—ë—Ç–Ω–æ—Å—Ç—å:\n"
        "/report ‚Äî –∫—Ä–∞—Ç–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        "/equity ‚Äî –≥—Ä–∞—Ñ–∏–∫ equity\n"
        "/export_csv ‚Äî CSV\n"
        "/export_xlsx ‚Äî Excel\n"
    )

@dp.message_handler(commands=['set_depo'])
async def set_depo_cmd(message: types.Message):
    try:
        val = float(message.get_args())
        uid = message.from_user.id
        set_user(uid, depo=val)
        await message.answer(f"üí∞ –î–µ–ø–æ–∑–∏—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {val:.2f} USDT")
    except:
        await message.answer("‚ö†Ô∏è –ü—Ä–∏–º–µ—Ä: /set_depo 1000")

@dp.message_handler(commands=['set_risk'])
async def set_risk_cmd(message: types.Message):
    try:
        val = float(message.get_args())
        uid = message.from_user.id
        set_user(uid, risk=val)
        await message.answer(f"‚öñÔ∏è –†–∏—Å–∫ –Ω–∞ —Å–¥–µ–ª–∫—É: {val:.2f}%")
    except:
        await message.answer("‚ö†Ô∏è –ü—Ä–∏–º–µ—Ä: /set_risk 2")

@dp.message_handler(commands=['set_limits'])
async def set_limits_cmd(message: types.Message):
    uid = message.from_user.id
    u = get_user(uid)
    parts = (message.get_args() or "").split()
    try:
        for p in parts:
            if p.startswith("daily="): set_user(uid, limits_daily=float(p.split("=",1)[1]))
            elif p.startswith("weekly="): set_user(uid, limits_weekly=float(p.split("=",1)[1]))
            elif p.startswith("max_trades="): set_user(uid, limits_max_trades=int(p.split("=",1)[1]))
        u = get_user(uid)
        await message.answer(f"üõ°Ô∏è –õ–∏–º–∏—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã: "
                             f"day {u['limit_daily']}% | week {u['limit_weekly']}% | max/day {u['limit_max_trades']}")
    except Exception:
        await message.answer("‚ö†Ô∏è –ü—Ä–∏–º–µ—Ä: /set_limits daily=5 weekly=15 max_trades=20")

@dp.message_handler(commands=['risk_limits'])
async def risk_limits_cmd(message: types.Message):
    uid = message.from_user.id
    u = get_user(uid)
    depo = float(u["depo"] or 0)
    if depo <= 0:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞–π –¥–µ–ø–æ–∑–∏—Ç: /set_depo 1000")
        return
    dstart, dend = today_bounds_utc()
    wstart, wend = week_bounds_utc()
    d = (get_period_pnl(uid, dstart, dend) / depo) * 100.0
    w = (get_period_pnl(uid, wstart, wend) / depo) * 100.0
    t = get_trades_today(uid)
    await message.answer(
        "üõ°Ô∏è –õ–∏–º–∏—Ç—ã —Ä–∏—Å–∫–∞:\n"
        f"Daily: {u['limit_daily']}% | –¢–µ–∫—É—â–∏–π –¥–µ–Ω—å: {d:.2f}%\n"
        f"Weekly: {u['limit_weekly']}% | –¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è: {w:.2f}%\n"
        f"Max trades/day: {u['limit_max_trades']} | –°–µ–≥–æ–¥–Ω—è: {t}"
    )

@dp.message_handler(commands=['balance'])
async def balance_cmd(message: types.Message):
    uid = message.from_user.id
    u = get_user(uid)
    if u["mode"] != "auto":
        await message.answer("‚ÑπÔ∏è –ë–∞–ª–∞–Ω—Å –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ –ê–≤—Ç–æ‚Äë—Ç—Ä–µ–π–¥.")
        return
    try:
        client = get_user_client(u)
        account = client.get_account()
        lines = ["üí∞ –ë–∞–ª–∞–Ω—Å—ã:"]
        for b in account["balances"]:
            total = float(b["free"]) + float(b["locked"])
            if total > 0:
                lines.append(f"‚Ä¢ {b['asset']}: {total}")
        await message.answer("\n".join(lines))
    except Exception as e:
        await message.answer(f"‚õî –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤: {e}")

@dp.message_handler(commands=['cancel_all'])
async def cancel_all_cmd(message: types.Message):
    uid = message.from_user.id
    u = get_user(uid)
    if u["mode"] != "auto":
        await message.answer("‚ÑπÔ∏è –û—Ç–º–µ–Ω–∞ –æ—Ä–¥–µ—Ä–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ –ê–≤—Ç–æ‚Äë—Ç—Ä–µ–π–¥.")
        return
    try:
        symbol = message.get_args().split()[0].upper()
        client = get_user_client(u)
        res = client.cancel_open_orders(symbol=symbol)
        await message.answer(f"üö´ –û—Ç–º–µ–Ω–µ–Ω—ã –≤—Å–µ –æ—Ä–¥–µ—Ä–∞ –ø–æ {symbol}\n{res}")
    except Exception as e:
        await message.answer(f"‚õî –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã: {e}")

@dp.message_handler(commands=['new_trade'])
async def new_trade_cmd(message: types.Message):
    """
    /new_trade SYMBOL ENTRY TP SL
    """
    try:
        uid = message.from_user.id
        u = get_user(uid)

        # lim checks
        ok, reason = check_limits(u)
        if not ok:
            await message.answer(reason)
            return

        symbol, entry, tp, sl = message.get_args().split()
        symbol = symbol.upper()
        entry = float(entry); tp = float(tp); sl = float(sl)

        risk_pct = float(u["risk"] or 0)
        depo = float(u["depo"] or 0)
        if risk_pct <= 0 or depo <= 0:
            await message.answer("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞–π –¥–µ–ø–æ–∑–∏—Ç –∏ —Ä–∏—Å–∫: /set_depo –∏ /set_risk")
            return

        stop_distance = abs(entry - sl)
        if stop_distance <= 0:
            await message.answer("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π SL.")
            return

        risk_amount = depo * (risk_pct / 100.0)
        raw_volume = risk_amount / stop_distance

        if u["mode"] == "signal":
            # –¢–æ–ª—å–∫–æ –∑–∞–ø–∏—Å—å —Å–∏–≥–Ω–∞–ª–∞ (–±–µ–∑ Binance)
            trade_id = save_trade(uid, symbol, entry, tp, sl, raw_volume, status="signal_open")
            await message.answer(f"üìù –°–∏–≥–Ω–∞–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω #{trade_id} {symbol}\n"
                                 f"entry={entry} TP={tp} SL={sl} vol‚âà{raw_volume:.6f}")
            return

        # AUTO MODE: —Ä–µ–∞–ª—å–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è
        client = get_user_client(u)
        lot_step, tick = _get_symbol_filters(client, symbol)
        qty = _round_qty(raw_volume, lot_step)
        entry_r = float(_round_price(entry, tick))
        tp_r = float(_round_price(tp, tick))
        sl_r = float(_round_price(sl, tick))

        # –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
        last_price = user_get_price(client, symbol)
        quote_needed = float(qty) * last_price
        free_usdt = user_get_balance(client, "USDT")
        if quote_needed > free_usdt:
            await message.answer(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ USDT: –Ω—É–∂–Ω–æ {quote_needed:.2f}, –¥–æ—Å—Ç—É–ø–Ω–æ {free_usdt:.2f}")
            return

        # MARKET BUY
        order = client.create_order(
            symbol=symbol, side=SIDE_BUY, type=ORDER_TYPE_MARKET, quantity=str(qty)
        )

        # —Å—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∏–∑ fills (–µ—Å–ª–∏ –±–∏—Ä–∂–∞ –≤–µ—Ä–Ω—É–ª–∞)
        avg_entry = entry_r
        if 'fills' in order and order['fills']:
            exec_qty, exec_quote = Decimal('0'), Decimal('0')
            for f in order['fills']:
                exec_qty += Decimal(f['qty'])
                exec_quote += Decimal(f['price']) * Decimal(f['qty'])
            if exec_qty > 0:
                avg_entry = float(exec_quote / exec_qty)

        # OCO SELL (TP/SL)
        stop_limit_price = float(_round_price(sl_r * 0.999, tick))
        client.create_oco_order(
            symbol=symbol, side=SIDE_SELL, quantity=str(qty),
            price=str(tp_r), stopPrice=str(sl_r),
            stopLimitPrice=str(stop_limit_price), stopLimitTimeInForce="GTC"
        )

        trade_id = save_trade(uid, symbol, avg_entry, tp_r, sl_r, float(qty), status="open")
        await message.answer(f"‚úÖ –û—Ç–∫—Ä—ã—Ç–æ #{trade_id} {symbol}\nqty={qty} entry‚âà{avg_entry:.8f} TP={tp_r} SL={sl_r}")

    except Exception as e:
        await message.answer(f"‚õî –û—à–∏–±–∫–∞: {e}\n–ü—Ä–∏–º–µ—Ä: /new_trade BTCUSDT 30000 32000 29000")

@dp.message_handler(commands=['close_trade'])
async def close_trade_cmd(message: types.Message):
    """
    /close_trade ID win|loss EXIT_PRICE
    """
    try:
        args = message.get_args().split()
        trade_id = int(args[0]); status = args[1].lower(); exit_price = float(args[2])
        if status not in ("win", "loss"):
            await message.answer("‚ö†Ô∏è –°—Ç–∞—Ç—É—Å: win –∏–ª–∏ loss")
            return
        cur.execute("SELECT user_id, entry, volume FROM trades WHERE id=?", (trade_id,))
        row = cur.fetchone()
        if not row:
            await message.answer("‚ö†Ô∏è –°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        uid, entry, vol = row
        pnl = (exit_price - float(entry)) * float(vol)
        close_trade_db(trade_id, exit_price, pnl, status)
        # –æ–±–Ω–æ–≤–∏–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –¥–µ–ø–æ
        u = get_user(uid)
        set_user(uid, depo=float(u["depo"] or 0) + pnl)
        await message.answer(f"‚úÖ –ó–∞–∫—Ä—ã—Ç–∞ #{trade_id} ({status}) exit={exit_price} | PnL={pnl:.2f}")
    except Exception:
        await message.answer("‚ö†Ô∏è –ü—Ä–∏–º–µ—Ä: /close_trade 12 win 31500")

# ---------------- –û—Ç—á—ë—Ç–Ω–æ—Å—Ç—å ----------------
@dp.message_handler(commands=['report'])
async def report_cmd(message: types.Message):
    uid = message.from_user.id
    df = df_user_trades(uid)
    if df.empty:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç —Å–¥–µ–ª–æ–∫.")
        return
    closed = df[df['status'].isin(['win','loss'])]
    total_trades = len(df); closed_trades = len(closed)
    wins = (closed['pnl'] > 0).sum(); losses = (closed['pnl'] <= 0).sum()
    total_pnl = float(closed['pnl'].sum()) if closed_trades else 0.0
    avg_win = float(closed[closed['pnl'] > 0]['pnl'].mean() or 0.0) if wins else 0.0
    avg_loss = float(closed[closed['pnl'] <= 0]['pnl'].mean() or 0.0) if losses else 0.0
    winrate = (wins / closed_trades * 100.0) if closed_trades else 0.0
    u = get_user(uid)
    text = ( "üìä –û—Ç—á—ë—Ç\n"
             f"–í—Å–µ–≥–æ: {total_trades} | –ó–∞–∫—Ä—ã—Ç–æ: {closed_trades}\n"
             f"üèÜ {wins} | ‚ùå {losses} | Winrate: {winrate:.2f}%\n"
             f"üíµ Total PnL: {total_pnl:.2f}\n"
             f"üìà Avg Win: {avg_win:.2f} | üìâ Avg Loss: {avg_loss:.2f}\n"
             f"üí∞ –î–µ–ø–æ–∑–∏—Ç (–≤–∏—Ä—Ç.): {float(u['depo'] or 0):.2f} USDT" )
    await message.answer(text)

@dp.message_handler(commands=['equity'])
async def equity_cmd(message: types.Message):
    uid = message.from_user.id
    df = df_user_trades(uid)
    closed = df[df['status'].isin(['win','loss'])].copy()
    if closed.empty:
        await message.answer("–ù–µ—Ç –∑–∞–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞.")
        return
    closed['closed_at'] = pd.to_datetime(closed['closed_at'])
    closed = closed.sort_values('closed_at')
    closed['cum_pnl'] = closed['pnl'].cumsum()
    y = closed['cum_pnl']
    plt.figure(figsize=(7,4.5))
    plt.plot(closed['closed_at'], y, marker="o")
    plt.title("Equity Curve (Cumulative PnL)")
    plt.xlabel("–î–∞—Ç–∞")
    plt.ylabel("USDT")
    plt.grid(True)
    plt.tight_layout()
    img = f"equity_{uid}.png"
    plt.savefig(img); plt.close()
    await message.answer_photo(open(img, "rb"))

@dp.message_handler(commands=['export_csv'])
async def export_csv_cmd(message: types.Message):
    uid = message.from_user.id
    df = df_user_trades(uid)
    if df.empty:
        await message.answer("–ù–µ—Ç —Å–¥–µ–ª–æ–∫ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.")
        return
    path = f"trades_{uid}.csv"
    df.to_csv(path, index=False, encoding="utf-8")
    await message.answer_document(open(path, "rb"))

@dp.message_handler(commands=['export_xlsx'])
async def export_xlsx_cmd(message: types.Message):
    uid = message.from_user.id
    df = df_user_trades(uid)
    if df.empty:
        await message.answer("–ù–µ—Ç —Å–¥–µ–ª–æ–∫ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.")
        return
    df['risk_R'] = (df['entry'] - df['sl'])
    df['reward_R'] = (df['tp'] - df['entry'])
    df['rr_ratio'] = df['reward_R'] / df['risk_R'].replace(0, pd.NA)
    path = f"trades_{uid}.xlsx"
    with pd.ExcelWriter(path, engine="openpyxl") as w:
        df.to_excel(w, index=False, sheet_name="Trades")
        closed = df[df['status'].isin(['win','loss'])]
        summary = {
            "total_trades": [len(df)],
            "closed_trades": [len(closed)],
            "wins": [(closed['pnl'] > 0).sum()],
            "losses": [(closed['pnl'] <= 0).sum()],
            "winrate_%": [((closed['pnl'] > 0).sum() / len(closed) * 100) if len(closed) else 0.0],
            "total_pnl": [float(closed['pnl'].sum()) if len(closed) else 0.0],
        }
        pd.DataFrame(summary).to_excel(w, index=False, sheet_name="Summary")
    await message.answer_document(open(path, "rb"))

# ------------------- Run -------------------
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
