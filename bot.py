import os
import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command

from data_sources import get_klines
from strategies import check_signals

logging.basicConfig(level=logging.INFO)

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
SYMBOLS = os.getenv("SYMBOLS", "BTCUSDT,ETHUSDT").split(",")
INTERVAL = os.getenv("INTERVAL", "1h")
POLL_SECONDS = int(os.getenv("POLL_SECONDS", 300))
CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")  # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, —á—Ç–æ–±—ã –±–æ—Ç —Å–ª–∞–ª —Ç–æ–ª—å–∫–æ —Ç–µ–±–µ

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()


@dp.message(Command("start"))
async def start_command(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø —Å–∏–≥–Ω–∞–ª—å–Ω—ã–π –±–æ—Ç üìä –ë—É–¥—É —Å–ª–µ–¥–∏—Ç—å –∑–∞ —Ä—ã–Ω–∫–æ–º –∏ –∫–∏–¥–∞—Ç—å —Å–∏–≥–Ω–∞–ª—ã.")


async def signal_worker():
    while True:
        for symbol in SYMBOLS:
            try:
                data = get_klines(symbol, INTERVAL, limit=100)
                signals = check_signals(data, symbol)
                for sig in signals:
                    text = f"‚ö° {symbol}: {sig}"
                    if CHAT_ID:
                        await bot.send_message(CHAT_ID, text)
                    else:
                        # fallback ‚Äî –µ—Å–ª–∏ —á–∞—Ç –Ω–µ —É–∫–∞–∑–∞–Ω, –±–æ—Ç –ø–∏—à–µ—Ç —Å–∞–º —Å–µ–±–µ
                        await bot.send_message((await bot.get_me()).id, text)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {symbol}: {e}")
        await asyncio.sleep(POLL_SECONDS)


async def main():
    asyncio.create_task(signal_worker())
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
